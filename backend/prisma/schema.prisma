// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Tenant {
  id               String   @id @default(uuid())
  name             String
  domain           String?  @unique
  whatsappConfig   String?  @map("whatsapp_config") // JSON as string
  openaiQuota      Int?     @default(10000) @map("openai_quota")
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  users            User[]
  products         Product[]
  orders           Order[]
  payments         Payment[]
  messages         Message[]
  auditLogs        AuditLog[]
  uploads          Upload[]

  @@map("tenants")
}

model User {
  id          String   @id @default(uuid())
  tenantId    String   @map("tenant_id")
  email       String   @unique
  passwordHash String  @map("password_hash")
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  role        String   @default("OWNER") // OWNER, ADMIN, EMPLOYEE
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Product {
  id          String   @id @default(uuid())
  tenantId    String   @map("tenant_id")
  name        String
  description String?
  price       Float    // Decimal as Float for SQLite
  sku         String?  @unique
  available   Boolean  @default(true)
  metadata    String?  // JSON as string
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Order {
  id            String   @id @default(uuid())
  tenantId      String   @map("tenant_id")
  customerName  String   @map("customer_name")
  customerPhone String   @map("customer_phone")
  items         String   // JSON as string: Array of {productId, name, qty, price}
  totalPrice    Float    @map("total_price") // Decimal as Float
  status        String   @default("PENDIENTE") // PENDIENTE, PAGADO, ENTREGADO, CANCELADO
  paymentMethod String?  @map("payment_method") // MERCADOPAGO, COMPROBANTE, EFECTIVO
  paymentRef    String?  @map("payment_ref")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  payments      Payment[]
  messages      Message[]

  @@map("orders")
}

model Payment {
  id                  String    @id @default(uuid())
  orderId             String    @map("order_id")
  tenantId            String    @map("tenant_id")
  provider            String    // MERCADOPAGO, COMPROBANTE, MANUAL
  providerPaymentId   String?   @map("provider_payment_id")
  amount              Float     // Decimal as Float
  status              String    @default("PENDING") // PENDING, APPROVED, REJECTED, CANCELLED
  receivedAt          DateTime? @map("received_at")
  metadata            String?   // JSON as string
  createdAt           DateTime  @default(now()) @map("created_at")

  // Relations
  order               Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  tenant              Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Message {
  id            String   @id @default(uuid())
  tenantId      String   @map("tenant_id")
  orderId       String?  @map("order_id")
  from          String   // CUSTOMER, ABA, SYSTEM
  direction     String   // INBOUND, OUTBOUND
  text          String
  nlpMeta       String?  @map("nlp_meta") // JSON as string: {intent, entities, confidence}
  mediaUrl      String?  @map("media_url")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  order         Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@map("messages")
}

model AuditLog {
  id          String   @id @default(uuid())
  tenantId    String   @map("tenant_id")
  userId      String?  @map("user_id")
  action      String
  resource    String
  resourceId  String?  @map("resource_id")
  metadata    String?  // JSON as string
  ipAddress   String?  @map("ip_address")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Upload {
  id          String   @id @default(uuid())
  tenantId    String   @map("tenant_id")
  filename    String
  originalName String  @map("original_name")
  mimeType    String   @map("mime_type")
  size        Int
  url         String
  metadata    String?  // JSON as string
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("uploads")
}